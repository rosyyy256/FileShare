@inject ISnackbar Snackbar
@inject ApplicationContext db

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileChips)
                {
                    <MudChip>
                        <MudText>@file.File.Name</MudText>
                        @file.RenderFragment
                    </MudChip>
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!fileChips.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileChips.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    private static string _defaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = _defaultDragClass;
    private long _maxFileSize = 1024L * 1024L * 100L;
    private int _bufferSize = 512 * 1024;
    private List<Test> fileChips = new();
    private class Test
    {
        public IBrowserFile File;
        public RenderFragment RenderFragment;

        public Test(IBrowserFile file, RenderFragment renderFragment)
        {
            File = file;
            RenderFragment = renderFragment;
        }
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            fileChips.Add(new Test(file, GetDefault()));
        }
    }

    private async Task Clear()
    {
        fileChips.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        fileChips.ForEach(fc => fc.RenderFragment = GetWaitingStatus());

        using var timer = new Timer(_ => InvokeAsync(() => StateHasChanged()));
        timer.Change(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));

        foreach (var fileChip in fileChips)
        {
            using var stream = fileChip.File.OpenReadStream(_maxFileSize);

            var uploadStream = await db.OpenUploadStreamAsync(fileChip.File.Name);

            byte[] buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(_bufferSize);
            int bytesRead;
            long totalBytesRead = 0;
            long fileSize = fileChip.File.Size;

            try
            {
                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    totalBytesRead += bytesRead;
                    fileChip.RenderFragment = SetPercentage((int)(100 * totalBytesRead / fileSize));
                    await uploadStream.WriteAsync(buffer, 0, bytesRead);
                }
            }
            finally
            {
                System.Buffers.ArrayPool<byte>.Shared.Return(buffer);
            }

            await uploadStream.CloseAsync();
            fileChip.RenderFragment = SetPercentage(100);
            fileChip.RenderFragment = GetUploadedStatus();
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{_defaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = _defaultDragClass;
    }

    RenderFragment GetDefault() => (__builder) => { };

    RenderFragment GetWaitingStatus()
    {
        return (__builder) =>
        {
            <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
        };
    }

    RenderFragment SetPercentage(int value)
    {
        return (__builder) =>
        {
            <MudText>@($" - {value}%")</MudText>
        };
    }

    RenderFragment GetUploadingStatus()
    {
        return (__builder) =>
        {
            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
        };
    }

    RenderFragment GetUploadedStatus()
    {
        return (__builder) =>
        {
            <MudIcon Icon="@Icons.Material.Filled.Done" />
        };
    }
}
